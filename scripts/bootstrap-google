#!/bin/bash

set -xeuo pipefail

#
# Set up a GCP resources for Terraform usage.
#
# 1. Create an admin project for Terraform.
# 2. Enable project services.
# 3. Create a service account for Terraform.
# 4. Create a bucket for Terraform state.
# 5. Barf a Terraform backend file.
# 6. Barf a shell environment file to source for running Terraform.
#

# shellcheck disable=SC1090,SC1091
source "environments/admin/seed.env"

# IAM roles for the admin project to bind to the Terraform service account.
GOOGLE_PROJECT_IAM_ROLES=(
  "viewer"
  "storage.admin"
  "dns.admin"
)

# IAM roles for the organization to bind to the Terraform service account.
GOOGLE_ORGANIZATION_IAM_ROLES=(
  "resourcemanager.projectCreator"
  "billing.user"
)

# Services to enable.
GOOGLE_SERVICES=(
  "cloudresourcemanager.googleapis.com"
  "cloudbilling.googleapis.com"
  "iam.googleapis.com"
  "compute.googleapis.com"
  "dns.googleapis.com"
)

# Email of the service account.
GOOGLE_SERVICE_ACCOUNT_EMAIL="${GOOGLE_SERVICE_ACCOUNT}@${GOOGLE_ADMIN_PROJECT_NAME}.iam.gserviceaccount.com"

# Create the admin project.
if ! gcloud projects describe "${GOOGLE_ADMIN_PROJECT_NAME}" > /dev/null; then
  gcloud projects create "${GOOGLE_ADMIN_PROJECT_NAME}" \
    --organization "${GOOGLE_ORGANIZATION_ID}" \
    --set-as-default
fi

# Link billing account.
gcloud beta billing projects link "${GOOGLE_ADMIN_PROJECT_NAME}" \
  --billing-account "${GOOGLE_BILLING_ACCOUNT_ID}"

# Enable services.
for service in "${GOOGLE_SERVICES[@]}"; do
  gcloud services enable "${service}"
done

# Create the service account.
if ! gcloud iam service-accounts describe "${GOOGLE_SERVICE_ACCOUNT_EMAIL}" > /dev/null; then
  gcloud iam service-accounts create "${GOOGLE_SERVICE_ACCOUNT}" \
    --display-name "Terraform"
fi

# Create the service account's credentials.
# shellcheck disable=SC2086
gcloud iam service-accounts keys create ${GOOGLE_CREDENTIALS_FILE} \
  --iam-account "${GOOGLE_SERVICE_ACCOUNT_EMAIL}"

# Bind project roles to the service account.
for role in "${GOOGLE_PROJECT_IAM_ROLES[@]}"; do
  gcloud projects add-iam-policy-binding "${GOOGLE_ADMIN_PROJECT_NAME}" \
    --member "serviceAccount:${GOOGLE_SERVICE_ACCOUNT_EMAIL}" \
    --role "roles/${role}"
done

# Bind organization roles to the service account.
for role in "${GOOGLE_ORGANIZATION_IAM_ROLES[@]}"; do
  gcloud organizations add-iam-policy-binding "${GOOGLE_ORGANIZATION_ID}" \
    --member "serviceAccount:${GOOGLE_SERVICE_ACCOUNT_EMAIL}" \
    --role "roles/${role}"
done

# Create the bucket which will contain the Terraform state.
if ! gsutil list -p "${GOOGLE_ADMIN_PROJECT_NAME}" "gs://${GOOGLE_TERRAFORM_STATE_BUCKET_NAME}"; then
  gsutil mb -p "${GOOGLE_ADMIN_PROJECT_NAME}" "gs://${GOOGLE_TERRAFORM_STATE_BUCKET_NAME}"
fi

# Enable versioning on the Terraform state bucket.
gsutil versioning set on "gs://${GOOGLE_TERRAFORM_STATE_BUCKET_NAME}"

# Barf a Terraform backend file.
cat > "environments/admin/backend.tfvars" <<EOF
bucket  = "${GOOGLE_TERRAFORM_STATE_BUCKET_NAME}"
prefix  = "terraform/state"
EOF

# Barf a shell environment file to source for running Terraform.
cat > "environments/admin/credentials.env" <<EOF
export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_CREDENTIALS_FILE}"
export GOOGLE_PROJECT="${GOOGLE_ADMIN_PROJECT_NAME}"
EOF
